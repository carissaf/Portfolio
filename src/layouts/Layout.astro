---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link rel="icon" type="image/svg+xml" href="/rabbit.svg" />
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<!--<ViewTransitions/>-->
	</head>
	<body>
		<div class="transition-overlay">
			<div class="banner-1 lg:h-screen w-screen z-50 bg-light-blue fixed lg:top-0 lg:w-1/4 lg:left-0 h-1/4 left-0 top-0"></div>
			<div class="banner-2 lg:h-screen w-screen z-50 bg-light-blue fixed lg:top-0 lg:w-1/4 lg:left-1/4 h-1/4 left-0 top-1/4"></div>
			<div class="banner-3 lg:h-screen w-screen z-50 bg-light-blue fixed lg:top-0 lg:w-1/4 lg:left-2/4 h-1/4 left-0 top-2/4"></div>
			<div class="banner-4 lg:h-screen w-screen z-50 bg-light-blue fixed lg:top-0 lg:w-1/4 lg:left-3/4 h-1/4 left-0 top-3/4"></div>
		</div>
		<slot />
	</body>
</html>

<style is:global>
	body{
		background-size: 30vw 30vw;
		background-attachment: fixed;
		background-image:
			linear-gradient(to right, rgba(128, 128, 128, 0.05) 2px, transparent 2px),
			linear-gradient(to bottom, rgba(128, 128, 128, 0.05) 2px, transparent 2px);
	}

	@media (min-width: 768px){
		body{
			background-size: 10vw 10vw;
		}
	}

	*{
		box-sizing: border-box;
		margin: 0;
		padding: 0;
	}

	::-webkit-scrollbar {
		width: 0;
	}
</style>

<script>
	import gsap from 'gsap'

	const b1 = document.querySelector('.banner-1');
	const b2 = document.querySelector('.banner-2');
	const b3 = document.querySelector('.banner-3');
	const b4 = document.querySelector('.banner-4');

	const animateIn = () => {
		if(b1 && b2 && b3 && b4){
			const tl = gsap.timeline();

			tl.set([b1, b2, b3, b4], {
				yPercent:0,
			}).to([b1, b2, b3, b4], {yPercent:100, stagger:0.1});
		}
	}

	const animateOut = () => {
		return new Promise((resolve) => {
			const tl = gsap.timeline({
				onComplete: resolve, // Resolve the promise when animation completes
			});
			tl.set([b1, b2, b3, b4], { yPercent: 100 })
				.to([b1, b2, b3, b4], { yPercent: 0, stagger: 0.1 });
		});
	}

	document.addEventListener("DOMContentLoaded", animateIn);

	document.querySelectorAll('a').forEach((link) => {
		link.addEventListener("click", (event) => {
			event.preventDefault(); // Prevent default navigation
			const href = link.getAttribute("href");

			animateOut().then(() => {
				window.location.href = href;
			});
		});
	})
</script>